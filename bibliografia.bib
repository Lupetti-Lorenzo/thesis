@misc{documentazioneOpenApi,
    author={SmartBear Software},
    note={https://swagger.io/specification/},
    title = {{OpenAPI Documentation}},
    year = {2024}
}

@misc{rfc1035,
    number =    1035,
    howpublished =  {RFC 1035},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC1035},
    url =       {https://www.rfc-editor.org/info/rfc1035},
    author =    {},
    title =     {{Domain names - implementation and specification}},
    pagetotal = 55,
    year =      1987,
    month =     nov,
    abstract =  {This RFC is the revised specification of the protocol and format used in the implementation of the Domain Name System. It obsoletes RFC-883. This memo documents the details of the domain name client - server communication.},
}


@misc{rfc8555,
    series =    {Request for Comments},
    number =    8555,
    howpublished =  {RFC 8555},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC8555},
    url =       {https://www.rfc-editor.org/info/rfc8555},
    author =    {Richard Barnes and Jacob Hoffman-Andrews and Daniel McCarney and James Kasten},
    title =     {{Automatic Certificate Management Environment (ACME)}},
    pagetotal = 95,
    year =      2019,
    month =     mar,
    abstract =  {Public Key Infrastructure using X.509 (PKIX) certificates are used for a number of purposes, the most significant of which is the authentication of domain names. Thus, certification authorities (CAs) in the Web PKI are trusted to verify that an applicant for a certificate legitimately represents the domain name(s) in the certificate. As of this writing, this verification is done through a collection of ad hoc mechanisms. This document describes a protocol that a CA and an applicant can use to automate the process of verification and certificate issuance. The protocol also provides facilities for other certificate management functions, such as certificate revocation.},
}

@misc{rfc6750,
    series =    {Request for Comments},
    number =    6750,
    howpublished =  {RFC 6750},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC6750},
    url =       {https://www.rfc-editor.org/info/rfc6750},
    author =    {Michael B. Jones and Dick Hardt},
    title =     {{The OAuth 2.0 Authorization Framework: Bearer Token Usage}},
    pagetotal = 18,
    year =      2012,
    month =     oct,
    abstract =  {This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources. Any party in possession of a bearer token (a "bearer") can use it to get access to the associated resources (without demonstrating possession of a cryptographic key). To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport. {[}STANDARDS-TRACK{]}},
}

@misc{rfc6454,
    series =    {Request for Comments},
    number =    6454,
    howpublished =  {RFC 6454},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC6454},
    url =       {https://www.rfc-editor.org/info/rfc6454},
    author =    {Adam Barth},
    title =     {{The Web Origin Concept}},
    pagetotal = 20,
    year =      2011,
    month =     dec,
    abstract =  {This document defines the concept of an "origin", which is often used as the scope of authority or privilege by user agents. Typically, user agents isolate content retrieved from different origins to prevent malicious web site operators from interfering with the operation of benign web sites. In addition to outlining the principles that underlie the concept of origin, this document details how to determine the origin of a URI and how to serialize an origin into a string. It also defines an HTTP header field, named "Origin", that indicates which origins are associated with an HTTP request. {[}STANDARDS-TRACK{]}},
}

@misc{rfc7519,
    series =    {Request for Comments},
    number =    7519,
    howpublished =  {RFC 7519},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC7519},
    url =       {https://www.rfc-editor.org/info/rfc7519},
    author =    {Michael B. Jones and John Bradley and Nat Sakimura},
    title =     {{JSON Web Token (JWT)}},
    pagetotal = 30,
    year =      2015,
    month =     may,
    abstract =  {JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.},
}

@misc{rfc6750,
    series =    {Request for Comments},
    number =    6750,
    howpublished =  {RFC 6750},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC6750},
    url =       {https://www.rfc-editor.org/info/rfc6750},
    author =    {Michael B. Jones and Dick Hardt},
    title =     {{The OAuth 2.0 Authorization Framework: Bearer Token Usage}},
    pagetotal = 18,
    year =      2012,
    month =     oct,
    abstract =  {This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources. Any party in possession of a bearer token (a "bearer") can use it to get access to the associated resources (without demonstrating possession of a cryptographic key). To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport. {[}STANDARDS-TRACK{]}},
}